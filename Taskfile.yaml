version: '3'

vars:
  platforms:
    - "linux/amd64"
    - "linux/arm64"
    - "darwin/amd64"
    - "darwin/arm64"
  outputDir: "./output"

tasks:
  default:
    desc: Show help messages
    silent: true
    cmds:
      - echo "Welcome to use go-task!"
      - echo
      - |
        echo "Available tasks:"
        task --list | awk 'NR>1 {print "  " $0}'

  build-plugin:
    desc: Generate plugin
    cmds:
      - CGO_ENABLED=1 go build -buildmode=plugin -o output/plugins/01_plugin.so plugins/01_plugin.go
      - CGO_ENABLED=1 go build -buildmode=plugin -o output/plugins/02_plugin.so plugins/02_plugin.go
      - CGO_ENABLED=1 go build -buildmode=plugin -o output/plugins/03_plugin.so plugins/03_plugin.go

  run:
    desc: Run guardhouse locally
    cmds:
      - go run main.go

  build:
    desc: Build guardhouse binary
    cmds:
      - go build -o output/noah main.go

  docker-build:
    desc: Build guardhouse binary by docker
    cmds:
      - docker compose up --build

  run-plugin:
    desc: Run guardhouse plugin mode
    cmds:
      - go run main.go plugin

  release:
    desc: "Compile the program for multiple platforms and architectures"
    silent: false
    cmds:
      - |
        for platform in {{range .platforms}}"{{.}}" {{end}}; do
          os=$(echo "$platform" | cut -d'/' -f1)
          arch=$(echo "$platform" | cut -d'/' -f2)
          echo "Building for OS: $os, Arch: $arch"
          GOOS=$os GOARCH=$arch go build -o {{.outputDir}}/${os}_${arch}/noah main.go

          CGO_ENABLED=1 GOOS=$os GOARCH=$arch go build -buildmode=plugin -o {{.outputDir}}/${os}_${arch}/plugins/01_plugin.so plugins/01_plugin.go
          CGO_ENABLED=1 GOOS=$os GOARCH=$arch go build -buildmode=plugin -o {{.outputDir}}/${os}_${arch}/plugins/02_plugin.so plugins/02_plugin.go
          CGO_ENABLED=1 GOOS=$os GOARCH=$arch go build -buildmode=plugin -o {{.outputDir}}/${os}_${arch}/plugins/03_plugin.so plugins/03_plugin.go

        done